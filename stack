.eqv PRINT_INT 1
.eqv PRINT_STRING 4
.eqv PRINT_CHAR 11
.eqv INPUT_INT 5
.eqv SYS_EXIT 10

.data

# the array that would hold stack elements
arr: .word 0:100
size: .word -4		#size of the array is set to underflow because array is 'empty', updated in functions
	
endl:		.asciiz  "\n" 
space:		.asciiz  " "
label_arr:	.asciiz  "Current elements: "
label_inst:	.asciiz  "Enter 1 to push, 2 to pop, 3 to find max, 4 to rotate, 0 to exit\n"
label_invalid:	.asciiz  "Invalid option \n"
label_empty:	.asciiz  "Array is empty \n"
label_max:	.asciiz  "Max is: "

.text														
main:					
		#show the list of options	
		li $v0, PRINT_STRING 
		la $a0, label_inst
		syscall
		
		#setting up options
		li $t1, 1
		li $t2, 2
		li $t3, 3
		li $t4, 4
		
		#get user input
		li $v0, INPUT_INT
		syscall
		move $s5, $v0
		
		#check if valid input
		bltz $s5, invalid  
		bgt $s5, $t4, invalid
		
		#go to option selected
		beqz $s5, exit
		beq $s5, $t1, push
		beq $s5, $t2, pop
		beq $s5, $t3, max
		beq $s5, $t4, rotate
		 
		
		
			
exit:
		li $v0, SYS_EXIT
		syscall
print_arr:
		li $t1, 0
		lw $t0, size
		li $v0, PRINT_STRING
		la $a0, label_arr
		syscall
		bgez $t0, ifNotEmpty
		li $v0, PRINT_STRING
		la $a0, label_empty
		syscall 
		j main
	ifNotEmpty:
		bgt $t1, $t0, endOfArray
		lw $t3, arr($t1)
		li $v0, PRINT_INT
		move $a0, $t3 
		syscall
		li $v0, PRINT_STRING
		la $a0, space
		syscall
		addi $t1, $t1, 4
		j ifNotEmpty
	endOfArray:
		li $v0, PRINT_STRING
		la $a0, endl
		syscall
		j main
		
		
push: 
		lw $t0, size
		addi $t0, $t0, 4
		sw $t0, size
		li $v0, INPUT_INT
		syscall
		move $t1, $v0
		sw $t1, arr($t0)
		j print_arr
		
				
		
pop:
		lw $t0, size #could save size in a preserved $s register but would req $sp
		bltz $t0, empty
		addi $t0, $t0, -4
		sw $t0, size
		j print_arr
		
		
		
max:
		lw $t0, size
		bltz $t0, empty
		li $t2, 0
		lw $t3, arr($t2)
		
		isMax:
			move $t1, $t3  
			addi $t2, $t2, 4
			lw $t3, arr($t2)
			ble $t1, $t3, curr
			
			bne $t2, $t0, isMax
			
		li $v0, PRINT_INT
		move $a0, $t1
		syscall
		j print_arr
			     
		
			
		
rotate:
		lw $t0, size
		bltz $t0, empty
		
		
invalid:
		li $v0, PRINT_STRING
		la $a0, label_invalid
		syscall
		j main
empty:
		li $v0, PRINT_STRING
		la $a0, label_empty
		syscall 
		j print_arr
